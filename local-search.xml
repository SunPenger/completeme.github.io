<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>源码解读 Golang 中 sync.Map 的实现原理</title>
    <link href="/2020/06/14/%E5%9B%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/"/>
    <url>/2020/06/14/%E5%9B%B0%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/</url>
    
    <content type="html"><![CDATA[<div class="markdown-body"> 简介Go 的内建 map 是不支持并发写操作的，原因是 map 写操作不是并发安全的，当你尝试多个 Goroutine 操作同一个 map，会产生报错：fatal error: concurrent map writes。<p>因此官方另外引入了 sync.Map 来满足并发编程中的应用。<br><img src="http://tvax3.sinaimg.cn/large/006cVhGqgy1gftbjxwlraj30fs08w74j.jpg" srcset="/img/loading.gif" alt=""><br>sync.Map 的实现原理可概括为：</p><p>通过 read 和 dirty 两个字段将读写分离，读的数据存在只读字段 read 上，将最新写入的数据则存在 dirty 字段上<br>读取时会先查询 read，不存在再查询 dirty，写入时则只写入 dirty<br>读取 read 并不需要加锁，而读或写 dirty 都需要加锁<br>另外有 misses 字段来统计 read 被穿透的次数（被穿透指需要读 dirty 的情况），超过一定次数则将 dirty 数据同步到 read 上<br>对于删除数据则直接通过标记来延迟删除<br>数据结构<br>Map 的数据结构如下：</p><p>type Map struct {<br>    // 加锁作用，保护 dirty 字段<br>    mu Mutex<br>    // 只读的数据，实际数据类型为 readOnly<br>    read atomic.Value<br>    // 最新写入的数据<br>    dirty map[interface{}]*entry<br>    // 计数器，每次需要读 dirty 则 +1<br>    misses int<br>}<br>其中 readOnly 的数据结构为：</p><p>type readOnly struct {<br>    // 内建 map<br>    m  map[interface{}]*entry<br>    amended bool  // 表示 dirty 里存在 read 里没有的 key，通过该字段决定是否加锁读 dirty<br>}<br>entry 数据结构则用于存储值的指针：</p><p>type entry struct {<br>    p unsafe.Pointer  // 等同于 *interface{}<br>}<br>属性 p 有三种状态：</p><p>p == nil: 键值已经被删除，且 m.dirty == nil<br>p == expunged: 键值已经被删除，但 m.dirty!=nil 且 m.dirty 不存在该键值（expunged 实际是空接口指针）<br>除以上情况，则键值对存在，存在于 m.read.m 中，如果 m.dirty!=nil 则也存在于 m.dirty<br>Map 常用的有以下方法：</p><p>Load：读取指定 key 返回 value<br>Store： 存储（增或改）key-value<br>Delete： 删除指定 key<br>源码解析<br>Load<br>func (m *Map) Load(key interface{}) (value interface{}, ok bool) {<br>    // 首先尝试从 read 中读取 readOnly 对象<br>    read, _ := m.read.Load().(readOnly)<br>    e, ok := read.m[key]</p><pre><code>// 如果不存在则尝试从 dirty 中获取if !ok &amp;&amp; read.amended {    m.mu.Lock()    // 由于上面 read 获取没有加锁，为了安全再检查一次    read, _ = m.read.Load().(readOnly)    e, ok = read.m[key]    // 确实不存在则从 dirty 获取    if !ok &amp;&amp; read.amended {        e, ok = m.dirty[key]        // 调用 miss 的逻辑        m.missLocked()    }    m.mu.Unlock()}if !ok {    return nil, false}// 从 entry.p 读取值return e.load()</code></pre><p>}</p><p>func (m *Map) missLocked() {<br>    m.misses++<br>    if m.misses &lt; len(m.dirty) {<br>        return<br>    }<br>    // 当 miss 积累过多，会将 dirty 存入 read，然后 将 amended = false，且 m.dirty = nil<br>    m.read.Store(readOnly{m: m.dirty})<br>    m.dirty = nil<br>    m.misses = 0<br>}<br>Store<br>func (m *Map) Store(key, value interface{}) {<br>    read, _ := m.read.Load().(readOnly)<br>    // 如果 read 里存在，则尝试存到 entry 里<br>    if e, ok := read.m[key]; ok &amp;&amp; e.tryStore(&amp;value) {<br>        return<br>    }</p><pre><code>// 如果上一步没执行成功，则要分情况处理m.mu.Lock()read, _ = m.read.Load().(readOnly)// 和 Load 一样，重新从 read 获取一次if e, ok := read.m[key]; ok {    // 情况 1：read 里存在    if e.unexpungeLocked() {        // 如果 p == expunged，则需要先将 entry 赋值给 dirty（因为 expunged 数据不会留在 dirty）        m.dirty[key] = e    }    // 用值更新 entry    e.storeLocked(&amp;value)} else if e, ok := m.dirty[key]; ok {    // 情况 2：read 里不存在，但 dirty 里存在，则用值更新 entry    e.storeLocked(&amp;value)} else {    // 情况 3：read 和 dirty 里都不存在    if !read.amended {        // 如果 amended == false，则调用 dirtyLocked 将 read 拷贝到 dirty（除了被标记删除的数据）        m.dirtyLocked()        // 然后将 amended 改为 true        m.read.Store(readOnly{m: read.m, amended: true})    }    // 将新的键值存入 dirty    m.dirty[key] = newEntry(value)}m.mu.Unlock()</code></pre><p>}</p><p>func (e *entry) tryStore(i *interface{}) bool {<br>    for {<br>        p := atomic.LoadPointer(&amp;e.p)<br>        if p == expunged {<br>            return false<br>        }<br>        if atomic.CompareAndSwapPointer(&amp;e.p, p, unsafe.Pointer(i)) {<br>            return true<br>        }<br>    }<br>}</p><p>func (e *entry) unexpungeLocked() (wasExpunged bool) {<br>    return atomic.CompareAndSwapPointer(&amp;e.p, expunged, nil)<br>}</p><p>func (e *entry) storeLocked(i *interface{}) {<br>    atomic.StorePointer(&amp;e.p, unsafe.Pointer(i))<br>}</p><p>func (m *Map) dirtyLocked() {<br>    if m.dirty != nil {<br>        return<br>    }</p><pre><code>read, _ := m.read.Load().(readOnly)m.dirty = make(map[interface{}]*entry, len(read.m))for k, e := range read.m {    // 判断 entry 是否被删除，否则就存到 dirty 中    if !e.tryExpungeLocked() {        m.dirty[k] = e    }}</code></pre><p>}</p><p>func (e *entry) tryExpungeLocked() (isExpunged bool) {<br>    p := atomic.LoadPointer(&amp;e.p)<br>    for p == nil {<br>        // 如果有 p == nil（即键值对被 delete），则会在这个时机被置为 expunged<br>        if atomic.CompareAndSwapPointer(&amp;e.p, nil, expunged) {<br>            return true<br>        }<br>        p = atomic.LoadPointer(&amp;e.p)<br>    }<br>    return p == expunged<br>}<br>Delete<br>func (m *Map) Delete(key interface{}) {<br>    m.LoadAndDelete(key)<br>}</p><p>// LoadAndDelete 作用等同于 Delete，并且会返回值与是否存在<br>func (m *Map) LoadAndDelete(key interface{}) (value interface{}, loaded bool) {<br>    // 获取逻辑和 Load 类似，read 不存在则查询 dirty<br>    read, _ := m.read.Load().(readOnly)<br>    e, ok := read.m[key]<br>    if !ok &amp;&amp; read.amended {<br>        m.mu.Lock()<br>        read, _ = m.read.Load().(readOnly)<br>        e, ok = read.m[key]<br>        if !ok &amp;&amp; read.amended {<br>            e, ok = m.dirty[key]<br>            m.missLocked()<br>        }<br>        m.mu.Unlock()<br>    }<br>    // 查询到 entry 后执行删除<br>    if ok {<br>        // 将 entry.p 标记为 nil，数据并没有实际删除<br>        // 真正删除数据并被被置为 expunged，是在 Store 的 tryExpungeLocked 中<br>        return e.delete()<br>    }<br>    return nil, false<br>}<br>总结<br>可见，通过这种读写分离的设计，解决了并发情况的写入安全，又使读取速度在大部分情况可以接近内建 map，非常适合读多写少的情况。</p><p>sync.Map 还有一些其他方法：</p><p>Range：遍历所有键值对，参数是回调函数<br>LoadOrStore：读取数据，若不存在则保存再读取<br>这里就不再详解了，可参见 源码。</p></div>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
